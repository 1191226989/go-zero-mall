// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package order

import (
	"context"

	"mall/service/order/rpc/proto3"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRequest         = proto3.CreateRequest
	CreateResponse        = proto3.CreateResponse
	DetailRequest         = proto3.DetailRequest
	DetailResponse        = proto3.DetailResponse
	GetUserLatestRequest  = proto3.GetUserLatestRequest
	GetUserLatestResponse = proto3.GetUserLatestResponse
	ListRequest           = proto3.ListRequest
	ListResponse          = proto3.ListResponse
	PaidRequest           = proto3.PaidRequest
	PaidResponse          = proto3.PaidResponse
	RemoveRequest         = proto3.RemoveRequest
	RemoveResponse        = proto3.RemoveResponse
	UpdateRequest         = proto3.UpdateRequest
	UpdateResponse        = proto3.UpdateResponse

	Order interface {
		Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
		Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
		Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error)
		List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
		Paid(ctx context.Context, in *PaidRequest, opts ...grpc.CallOption) (*PaidResponse, error)
		CreateRevert(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		GetUserLatest(ctx context.Context, in *GetUserLatestRequest, opts ...grpc.CallOption) (*GetUserLatestResponse, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := proto3.NewOrderClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultOrder) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	client := proto3.NewOrderClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultOrder) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	client := proto3.NewOrderClient(m.cli.Conn())
	return client.Remove(ctx, in, opts...)
}

func (m *defaultOrder) Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error) {
	client := proto3.NewOrderClient(m.cli.Conn())
	return client.Detail(ctx, in, opts...)
}

func (m *defaultOrder) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	client := proto3.NewOrderClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultOrder) Paid(ctx context.Context, in *PaidRequest, opts ...grpc.CallOption) (*PaidResponse, error) {
	client := proto3.NewOrderClient(m.cli.Conn())
	return client.Paid(ctx, in, opts...)
}

func (m *defaultOrder) CreateRevert(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := proto3.NewOrderClient(m.cli.Conn())
	return client.CreateRevert(ctx, in, opts...)
}

func (m *defaultOrder) GetUserLatest(ctx context.Context, in *GetUserLatestRequest, opts ...grpc.CallOption) (*GetUserLatestResponse, error) {
	client := proto3.NewOrderClient(m.cli.Conn())
	return client.GetUserLatest(ctx, in, opts...)
}
